/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Element as PrismaElement,
  Page as PrismaPage,
} from "@prisma/client";

export class ElementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ElementCountArgs, "select">): Promise<number> {
    return this.prisma.element.count(args);
  }

  async elements(args: Prisma.ElementFindManyArgs): Promise<PrismaElement[]> {
    return this.prisma.element.findMany(args);
  }
  async element(
    args: Prisma.ElementFindUniqueArgs
  ): Promise<PrismaElement | null> {
    return this.prisma.element.findUnique(args);
  }
  async createElement(args: Prisma.ElementCreateArgs): Promise<PrismaElement> {
    return this.prisma.element.create(args);
  }
  async updateElement(args: Prisma.ElementUpdateArgs): Promise<PrismaElement> {
    return this.prisma.element.update(args);
  }
  async deleteElement(args: Prisma.ElementDeleteArgs): Promise<PrismaElement> {
    return this.prisma.element.delete(args);
  }

  async getPage(parentId: string): Promise<PrismaPage | null> {
    return this.prisma.element
      .findUnique({
        where: { id: parentId },
      })
      .page();
  }
}
